<div id="employeeEditModal" class="modal" role="dialog" data-backdrop="static" data-keyboard="false">
	<div class="modal-dialog modal-lg">
		<div class="modal-content">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
				<h4 class="modal-title">Edit Employee</h4>
			</div>
			<div class="modal-body">
				
				<div class="row">
					<form>
						<div class="col-md-4">
							
							<div class="form-group" id="businessIDWrap">
								<label for="employeeID">Employee ID</label>
								<input type="text" class="form-control e-value" id="employeeID"/>
							</div>
							<div class="form-group">
								<label for="name">First Name</label>
								<input type="text" class="form-control e-value" id="firstName">
							</div>
							<div class="form-group">
								<label for="name">Last Name</label>
								<input type="text" class="form-control e-value" id="lastName">
							</div>

							<div class="form-group">
								<label for="name">Title</label>
								<input type="text" class="form-control e-value" id="title">
							</div>

							<div class="form-group">
								<label for="name">Email</label>
								<input type="text" class="form-control e-value" id="email">
							</div>

							<div class="form-group">
								<label for="name">User Name</label>
								<div class="input-group">
									<input type="text" class="form-control span2 e-value" id="userName">
									<span class="input-group-btn">
										<input type="button" class="btn btn-default" id="activeDirectoryBtn" value="AD"/>
									</span>
								</div>
								<div id="userNameWarning">This username is already in use</div>
							</div>

							<div class="form-group">
								<label for="name">Position Code</label>
								<input type="text" class="form-control e-value" id="positionCode">
							</div>

						</div>
						<div class="col-md-4">
							
							<div class="form-group">
								<label for="name">Property ID</label>
								<input type="text" class="form-control e-value" id="propertyID">
							</div>

							<div class="form-group">
								<label for="property">Property</label>
								<!--<input type="text" class="form-control e-value" id="type">-->
								<select class="form-control e-value select" id="property">
									<option value="">None</option>
									{% for e in properties %}
										<option value="{{ e.property }}">{{ e.property }}</option>
									{% endfor %}
								</select>
							</div>

							<div class="form-group">
								<label for="costCenter">Cost Center</label>
								<select class="select2-ajax entity-type-select e-value" data-type="costCenter" id="costCenter"></select>
							</div>

							<div class="form-group">
								<label for="name">Hire Date</label>
								<input type="text" class="form-control e-value" id="hireDate">
							</div>

							<div class="form-group">
								<label for="name">Termination Date</label>
								<input type="text" class="form-control e-value" id="terminationDate">
							</div>

							<div class="form-group">
								<label for="jobClass">Job Class</label>
								<select class="form-control e-value select" id="jobClass">
									<option value="">None</option>
									{% for e in jobClasses %}
										<option value="{{ e.jobClass }}">{{ e.jobClass }}</option>
									{% endfor %}
								</select>
							</div>

							<div class="form-group">
								<label for="name">Birth Date</label>
								<input type="text" class="form-control e-value" id="birthDate">
							</div>
							
						</div>
						<div class="col-md-4">

							<div class="form-group">
								<label for="supervisorID">Supervisor</label>
								<select class="select2-ajax entity-type-select e-value" data-type="employee" id="supervisorEmployeeID">
									<option value="">None</option>
								</select>
							</div>

							<div class="form-group">
								<label for="directorEmployeeID">Director</label>
								<select class="select2-ajax entity-type-select e-value" data-type="employee" id="directorEmployeeID">
									<option value="">None</option>
								</select>
							</div>

							<div class="form-group">
								<label for="vpEmployeeId">VP</label>
								<select class="select2-ajax entity-type-select e-value" data-type="employee" id="vpEmployeeId">
									<option value="">None</option>
								</select>
							</div>

							<div class="form-group">
								<label for="created">Created</label>
								<input type="text" class="form-control bus-value" id="created" disabled>
							</div>
							
							<div class="form-group">
								<label for="lastUpdated">Updated</label>
								<input type="text" class="form-control bus-value" id="lastUpdated" disabled>
							</div>
							
						</div>
					</form>
				</div>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-danger pull-left" id="deleteEmployeeBtn" data-employeeID="">Delete</button>
				<button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
				<button type="button" class="btn btn-primary" id="saveEmployeeBtn" data-employeeID="">Save</button>
			</div>
		</div><!-- /.modal-content -->
	</div><!-- /.modal-dialog -->
</div><!-- /.modal -->

<script>
	var source = false;
	
	$(document).ready(function() {

		$('#costCenter').on('select2:select', function() {
			bsAlert("Getting Director and VP from cost center...", 'info');
			
			// Look up and fill in director and vp
			var costCenter = $(this).val();

			$.ajax({
				url: "/api/get-business-by-cost-center/" + costCenter,
				method: "GET",
				dataType: 'json'
			}).done(function(response) {
				//console.log(response);
				var directorID = response.directorID;
				initSelect2Ajax($('#directorEmployeeID'), 'employee', {id: directorID});
				
				var vpID = response.vpID;
				initSelect2Ajax($('#vpEmployeeId'), 'employee', {id: vpID});
				
			}).fail(function(response) {
				console.log(response.responseJSON);
				if (response.responseJSON != undefined) {
					bsAlert("Error: " + response.responseJSON.error_msg, 'error');
				}
				else {
					bsAlert("Error: " + response.responseText, 'error');
				}
			});
		});

		$('#activeDirectoryBtn').click(function() {
			bsAlert("Populating values from Active Directory...", 'info');
			
			var data = {
				ajaxAction: 'get-ad-data',
				userName: $.trim($('#userName').val())
			};
			
			//console.log('"' + data.userName + '"');

			$.ajax({
				url: "/admin/employees",
				method: "POST",
				data: data,
				dataType: 'json'
			}).done(function(response) {
				//console.log(response);
				for (var field in response) {
					$('#' + field).val(response[field]);
				}
			}).fail(function(response) {
				console.log(response.responseJSON);
				if (response.responseJSON != undefined) {
					bsAlert("Error: " + response.responseJSON.error_msg, 'error');
				}
				else {
					bsAlert("Error: " + response.responseText, 'error');
				}
			});
		});
		
		$("#saveEmployeeBtn").click(function() {
			var data = {};
			$(".e-value").each(function(i, el) {
				el = $(el);
				var field = el.attr("id");

				if (el.is("input[type='text']") || el.is("select")) {
					data[field] = $.trim(el.val());
					//console.log(field + ':' + data[field]);
				}
				else if (el.is("input[type='checkbox']")) {
					data[field] = el.prop("checked");
					//console.log(field + ':' + value);
				}
			});

			//console.log(data);

			$.ajax({
				url: "/api/save-employee",
				method: "POST",
				data: data
			}).done(function(response) {
				//console.log(response);
				$("#employeeEditModal").modal("hide");
				location.reload();
			}).fail(function(response) {
				console.log(response);
				if (response.responseJSON != undefined) {
					bsAlert("Error: " + response.responseJSON.error_msg, 'error');
				}
				else {
					bsAlert("Error: " + response.responseText, 'error');
				}
			});
		});
		
		$('#deleteEmployeeBtn').click(function() {
			if (source === false) {
				bsAlert('You can only delete an employee where the source is User.', 'error');
				return;
			}

			var btn = $(this);

			bootbox.dialog({
				message: "Are you sure you want to delete this employee and all associated data?<br/><br/>This action can not be undone.",
				title: "Delete Employee",
				buttons: {
					success: {
						label: "Delete",
						className: "btn-danger",
						callback: function() {
							var data = {
								employeeID: btn.attr('data-employeeID')
							};

							//console.log(data);

							$.ajax({
								url: "/api/remove-employee",
								method: "POST",
								data: data,
								dataType: 'json'
							}).done(function (response) {
								//console.log(response);
								$("#employeeEditModal").modal("hide");
								location.reload();
							}).fail(function (response) {
								console.log(response);
								if (typeof response.responseJSON.error_msg != 'undefined') {
									bsAlert("Error: " + response.responseJSON.error_msg, 'error');
								}
								else {
									bsAlert("Error: " + response.responseText, 'error');
								}
							});
						}
					},
					main: {
						label: "Cancel",
						className: "btn-primary"
					}
				}
			});
		});

		var usernameTimeout;
		$('#userName').on('change keyup', function() {
			if (curMode !== 'edit') {
				var $this = $(this);
				clearTimeout(usernameTimeout);
				usernameTimeout = setTimeout(function () {
					// Look up the userName
					var userName = $this.val();

					$.ajax({
						url: "/api/get-employee-by-username/" + userName,
						method: "GET",
						dataType: 'json'
					}).done(function (response) {
						if (typeof response.employeeID != 'undefined') {
							$("#userNameWarning").show();
							$("#saveEmployeeBtn").prop('disabled', true);
						}
					}).fail(function (response) {
						if (response.status == 400) {
							$("#userNameWarning").hide();
							$("#saveEmployeeBtn").prop('disabled', false);
						}
					});
				}, 1000);
			}
		});
	});
	
	var curMode;
	var initEmployeeEditDialog = function(mode, businessId, values) {
		//console.log(values);

		$("#userNameWarning").hide();
		$("saveEmployeeBtn").prop('disabled', false);

		curMode = mode;
		
		if (mode == 'edit') {
			
			$('#employeeEditModal .modal-title').text("Edit Employee");
			
			source = '';
			
			$.each(values, function(name, value) {
				//console.log(name + ' = ' + value);
				
				if (name == 'source') {
					source = value;
				}
				
				var el = $("#" + name);
				if (el.length) {
					if (el.is("select")) {
						if (el.hasClass('select2-ajax')) {
							var type = el.attr('data-type');
							initSelect2Ajax(el, type, {id: value, text: name}, false);
						}
						else {
							el.val(value);
							setSelectOptionColor(el);
						}
					}
					else if (el.is("input[type='text']")) {
						//el.attr("value", value);
						el.val(value);
					}
					else if (el.is("input[type='checkbox']")) {
						if (value == true || value == "Yes") {
							el.prop('checked', true);
						}
						else {
							el.prop('checked', false);
						}
					}
				}
			});
			
			//console.log(typeof source);

			$("#saveEmployeeBtn").attr("data-employeeID", businessId);
			$("#deleteEmployeeBtn").attr("data-employeeID", businessId);

			$('.e-value').prop('disabled', false);
			$('#employeeID').prop('disabled', true);
			$('#source').prop('disabled', true);
			
			if (source != 'User') {
				$('#deleteEmployeeBtn').hide();
			}
			
			if (source.trim() == 'HR') {
				$('#deleteEmployeeBtn').hide();
				$('.e-value').prop('disabled', true);
				$('#userName').prop('disabled', false);
			}
			else {
				$('#deleteEmployeeBtn').show();
			}
		}
		else {
			$('#employeeEditModal .modal-title').text("Add Employee");

			$('.select2-ajax').each(function() {
				var type = $(this).attr('data-type');
				initSelect2Ajax($(this), type);
			});
			
			$('.e-value').each(function() {
				var el = $(this);
				if (el.is("select")) {
					el.val('');
					if (el.hasClass('select2-ajax')) {
						el.trigger('change');
					}
					setSelectOptionColor(el);
				}
				else if (el.is("input[type='text']")) {
					el.val('');
				}
				else if (el.is("input[type='checkbox']")) {
					el.prop('checked', false);
				}
			});

			$('.e-value').prop('disabled', false);
			$('#source').val('User').prop('disabled', true);
			$('#isActive').prop('checked', true);
			
			$('#deleteEmployeeBtn').hide();
		}
	}
</script>